---Cucumber Projesi olusturmak icin yapilmasi gereken adimlar---
1-Öncelikle dependency pom.xml dosyamiza yüklememiz gerekir.
    (selenium.java,webdrivermanager,cucumber-java,cucumber-junit)
2-Sonra file ->setting->plugins->marketplace den cucumber ve gherkin pluginlerini yüklememiz gerekir
3-Test->java->texhproed-> 4tane package olustururuz.
    3.1-pages->Locatelerimiz bu package altinda tutariz.
    3.2->stepDefinitions->Yazdigimiz test adimlarinin kodlarini tutariz.
    3.3->utilities->Projemiz icin olusturmus oldugumuz driver classlarini bu package da tutariz.
    3.4->runners->Bu package altinda istediginiz senaryoalari calistirir ve raporlar alabiliriz
4-Test package altinda Gherkin language kullanarak yazacagimiz .feature file'lar icin resources package'i olustururuz.
5-Projemizdeki datalari bir yerde toplamak icib .properties uzantili dosya olustururuz.
    (Proje seviyesinde bu dosyamizi olustururuz.)
6-.feature file'lar icin resources package altinda features isminde bir package daha olustururuz.
7-features package üstüne gelir sag tiklayip new->file ile bir feature uzantili file olusturalim


--Parallel Testing--
1-Parallel Testing yapabilmek için öncelikle sure-fire plugin'i pom.xml dosyamıza eklememiz gerekiyor.
<build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <parallel>methods</parallel>
                    <threadCount>2</threadCount> <!--aynı anda 2 browser çalıştırılacağı anlamına gelir. -->
                    <perCoreThreadCount>false</perCoreThreadCount>
                    <forkCount>2</forkCount> <!-- iki ayrı işlemi başlatır ve her biri farklı bir test paketi çalıştırır. Bu, testlerin daha hızlı tamamlanmasını sağlar. Ancak, bu ayarın artırılması, sistemin kaynaklarını tüketebilir ve performans sorunlarına neden olabilir. -->
                    <reuseForks>true</reuseForks> <!--Maven önceki testlerde oluşturulmuş işlemleri yeniden kullanır -->
                    <includes>
                        <include>**/runners/*Runner*.java</include>
                    </includes>
                    <testFailureIgnore>true</testFailureIgnore> <!--testin başarısız olmasına rağmen diğer testlere devam eder ve sonunda tüm testleri çalıştırır. -->
                </configuration>
            </plugin>
        </plugins>
    </build>
2-Aynı anda 2 farklı scenario çalıştırabilmek için bir tane daha Runner1 isminde class oluşturduk
(3 farklı scenario çalıştırmak istersek 3 adet Runner class'ı olmali)
3-tags parametresine hangi scenario'ları çalıştıracaksak onları belirttik
4-Terminali açarak mvn clean verify yazarak aynı anda scenario'larımı run ederiz
((Yada sag taraftaki maven -> lifecycle-> once -> clean'i iki kere tikliyoruz target gidiyor sonra->
verify iki kere tikliyoruz target tekrar olusuyor testlerimiz çalışıyor))9